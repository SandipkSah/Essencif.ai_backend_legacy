trigger:
- master
- stage
- staging
- dev

variables:
  azureServiceConnection: 'essencif.ai_resources'
  vmImageName: 'ubuntu-latest'
  imageRegistry: 'essencifai-backend'
  containerRegistry: 'container-registry'
  containerRegistryServerURL: 'essencifaibackendregistry.azurecr.io'
  pythonVersion: '3.12'

stages:
- stage: Build
  displayName: Build and Dockerize
  jobs:
  - job: BuildDockerImage
    pool:
      vmImage: $(vmImageName)
    steps:
    
    - checkout: self
      persistCredentials: true  # Allows fetching Git tags

    # Get the latest Git tag and count commits
    - bash: |
        latest_tag=$(git describe --tags --abbrev=0 || echo "v1.0.0")
        commit_count=$(git rev-list ${latest_tag}..HEAD --count)
        new_version="${latest_tag}-rc.${commit_count}"
        echo "Latest tag: $latest_tag"
        echo "Commit count since last tag: $commit_count"
        echo "Generated version: $new_version"
        echo "##vso[task.setvariable variable=VERSION_TAG]$new_version"
      displayName: "Generate Version Tag from Git"

    - bash: |
        # Get the latest tag (fallback to v1.0.0 if none exist)
        latest_tag=$(git describe --tags --abbrev=0 || echo "v1.0.0")

        # Count commits since last tag
        commit_count=$(git rev-list ${latest_tag}..HEAD --count)

        # If no new commits, use the latest tag, otherwise, create an RC version
        if [ "$commit_count" -eq "0" ]; then
          new_version="$latest_tag"
        else
          new_version="${latest_tag}-rc.${commit_count}"
        fi

        # Print the generated version
        echo "Latest tag: $latest_tag"
        echo "Commit count since last tag: $commit_count"
        echo "Generated version: $new_version"

        # Set the version variable for Azure Pipelines
        echo "##vso[task.setvariable variable=VERSION_TAG]$new_version"
      displayName: "Generate Version Tag from Git"


    # Login to ACR
    - task: Docker@2
      displayName: Docker login to ACR
      inputs:
        command: login
        containerRegistry: '$(containerRegistry)'

    # Build and push Docker image with version tag
    - task: Docker@2
      displayName: Build and Push Docker Image
      inputs:
        command: buildAndPush
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageRegistry)'
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: "$(VERSION_TAG)"


- stage: DeployDevelopment
  displayName: 'Deploy Development'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  variables:
    DEPLOYMENT_APP_SERVICE_CONTAINER: 'essencifai-backend-dev'
    AZURE_COMPILATION_ENV: 'development'

  jobs:
  - deployment: DevelopmentDeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: $(azureServiceConnection)
              appType: 'webAppContainer'
              WebAppName: $(DEPLOYMENT_APP_SERVICE_CONTAINER)
              containers: $(containerRegistry)/$(imageRegistry):$(VERSION_TAG)
              DockerNamespace: '$(containerRegistryServerURL)'
              DockerRepository: $(imageRegistry):$(VERSION_TAG)

- stage: DeployStaging
  displayName: 'Deploy Staging'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/staging'))
  variables:
    DEPLOYMENT_APP_SERVICE_CONTAINER: 'essencifai-backend-staging'
    AZURE_COMPILATION_ENV: 'staging'
    BASE_URL: 'https://essencifai-backend-staging.azurewebsites.net/'

  jobs:
  - deployment: DevelopmentStagingJob
    pool:
      vmImage: $(vmImageName)
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: $(azureServiceConnection)
              appType: 'webAppContainer'
              WebAppName: $(DEPLOYMENT_APP_SERVICE_CONTAINER)
              containers: $(containerRegistry)/$(imageRegistry):$(VERSION_TAG)
              DockerNamespace: '$(containerRegistryServerURL)'
              DockerRepository: $(imageRegistry):$(VERSION_TAG)

- stage: DeployProduction
  displayName: 'Deploy Production'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    DEPLOYMENT_APP_SERVICE_CONTAINER: 'essencifai-backend-prod'
    AZURE_COMPILATION_ENV: 'production'

  jobs:
  - deployment: DevelopmentProductionJob
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: $(azureServiceConnection)
              appType: 'webAppContainer'
              WebAppName: $(DEPLOYMENT_APP_SERVICE_CONTAINER)
              containers: $(containerRegistry)/$(imageRegistry):$(VERSION_TAG)
              DockerNamespace: '$(containerRegistryServerURL)'
              DockerRepository: $(imageRegistry):$(VERSION_TAG)
