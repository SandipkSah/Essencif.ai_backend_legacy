# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master
- stage


variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnection: 'essencif.ai_resources'

  # Web app name
  webAppProduction: 'essecifai-backend-production'
  webAppDevelopment: 'essecifai-backend-development'
  webAppTesting: 'essecifai-backend-testing'
  webAppDevelopment2: 'essencifai-backend-development'
  webAppTesting2: 'essencifai-backend-testing'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment name
  # environmentName: 'essencifai-backend'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version: 3.12
  pythonVersion: '3.12'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m venv antenv
        pip install -r requirements.txt
        # source ./antenv/bin/activate
      workingDirectory: $(projectRoot)
      displayName: "Install requirements"

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
        excludePatterns: |
          **/.git/**

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop


# - stage: DeployDevelopment
#   displayName: 'Deploy Web App Development'
#   dependsOn: Build
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/stage'))
#   jobs:
#   - deployment: DevelopmentDeploymentJob
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'development'
#     strategy:
#       runOnce:
#         deploy:
#           steps:

#           - task: UsePythonVersion@0
#             inputs:
#               versionSpec: '$(pythonVersion)'
#             displayName: 'Use Python version'

#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App : essencifai-backend-development'
#             inputs:
#               azureSubscription: $(azureServiceConnection)
#               appName: $(webAppDevelopment)
#               package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip


- stage: DeployTesting
  displayName: 'Deploy Web App Testing'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/stage'))
  jobs:
  - deployment: TestingDeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: 'testing'
    strategy:
      runOnce:
        deploy:
          steps:

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : essencifai-backend-development'
            inputs:
              azureSubscription: $(azureServiceConnection)
              appName: $(webAppTesting)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
     

# - stage: DeployDevelopment2
#   displayName: 'Deploy Web App Development'
#   dependsOn: Build
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/stage'))
#   jobs:
#   - deployment: DevelopmentDeploymentJob
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'development2'
#     strategy:
#       runOnce:
#         deploy:
#           steps:

#           - task: UsePythonVersion@0
#             inputs:
#               versionSpec: '$(pythonVersion)'
#             displayName: 'Use Python version'

#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App : essencifai-backend-development'
#             inputs:
#               azureSubscription: $(azureServiceConnection)
#               appName: $(webAppDevelopment2)
#               package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip


# - stage: DeployTesting2
#   displayName: 'Deploy Web App Testing'
#   dependsOn: Build
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/stage'))
#   jobs:
#   - deployment: TestingDeploymentJob
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'testing2'
#     strategy:
#       runOnce:
#         deploy:
#           steps:

#           - task: UsePythonVersion@0
#             inputs:
#               versionSpec: '$(pythonVersion)'
#             displayName: 'Use Python version'

#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App : essencifai-backend-development'
#             inputs:
#               azureSubscription: $(azureServiceConnection)
#               appName: $(webAppTesting2)
#               package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
  

- stage: DeployProduction
  displayName: 'Deploy Web App Production'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: ProductionDeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : essencifai-backend-production'
            inputs:
              azureSubscription: $(azureServiceConnection)
              appName: $(webAppProduction)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              
