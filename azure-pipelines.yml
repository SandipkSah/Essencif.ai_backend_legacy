trigger:
- master
- stage
- staging
- dev



variables:
  azureServiceConnection: 'essencif.ai_resources'
  vmImageName: 'ubuntu-latest'
  imageRegistry: 'essencifai-backend'  # Project-specific name
  containerRegistry: 'container-registry'  # Full Azure Container Registry URL
  containerRegistryServerURL: 'essencifaibackendregistry.azurecr.io'  # Full Azure Container server URL
  pythonVersion: '3.12'
  

stages:
- stage: Build
  displayName: Build and Dockerize
  jobs:
  - job: BuildDockerImage
    pool:
      vmImage: $(vmImageName)
    steps:

    - checkout: self
      persistCredentials: true  # Allows fetching Git tags
      fetchDepth: 0

    - script: |
        branch_name=$(git rev-parse --abbrev-ref HEAD)
        echo "======"
        echo "$(git describe --tags --abbrev=0)"
        echo "$(git describe --tags)"
        echo "====="
        last_tag=$(git describe --tags --abbrev=0 || echo "v1.0.0")
        commit_number=$(git rev-list $last_tag..HEAD --count)

        if [[ "$branch_name" == "master" ]]; then
            version_suffix=""  # Stable release (e.g., v1.0.0)
        elif [[ "$branch_name" == "dev" ]]; then
            version_suffix="-dev.${commit_number}"  # Development build
        else
            version_suffix="-rc.${commit_number}"  # Release candidate
        fi

        new_version="${last_tag}${version_suffix}"

        echo "Branch: $branch_name"
        echo "Latest Tag: $last_tag"
        echo "Commit Number Since Last Tag: $commit_number"
        echo "Generated VERSION_TAG: $new_version"

        echo "##vso[task.setvariable variable=VERSION_TAG]$new_version"
        echo "##vso[task.setvariable variable=VERSION_TAG;isOutput=true]$new_version"
      name: SetVersionTag 
      displayName: "Generate Version Tag"

    # - script: |
        
    #   name: SetVersionTag  # This name is important for referencing outputs later
    #   displayName: "Generate Version Tag"
    
    
    - script: |
        echo "VERSION_TAG: $(VERSION_TAG)"
      displayName: "Verify VERSION_TAG"

    # Login to Azure Container Registry (if needed)
    # - task: Docker@2
    #   displayName: Docker login to ACR
    #   inputs:
    #     command: login
    #     containerRegistry: '$(containerRegistry)'

    # - task: Docker@2
    #   displayName: Build and Push Docker Image
    #   inputs:
    #     command: buildAndPush
    #     containerRegistry: '$(containerRegistry)'
    #     repository: '$(imageRegistry)'
    #     dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
    #     tags: "$(VERSION_TAG)"





- stage: DeployDevelopment
  displayName: 'Deploy Development'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  variables:
    DEPLOYMENT_APP_SERVICE_CONTAINER: 'essencifai-backend-dev'
    AZURE_COMPILATION_ENV: 'development'
    VERSION_TAG: $[ dependencies.BuildDockerImage.outputs['SetVersionTag.VERSION_TAG'] ]

  jobs:
  - deployment: DevelopmentDeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying version: $(VERSION_TAG)"
            displayName: "Verify VERSION_TAG before deployment"

          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: $(azureServiceConnection)
              appType: 'webAppContainer'
              WebAppName: $(DEPLOYMENT_APP_SERVICE_CONTAINER)
              containers: $(containerRegistryServerURL)/$(imageRegistry):$(VERSION_TAG)
              DockerNamespace: 'essencifaibackendregistry.azurecr.io'
              # DockerRepository: $(imageRegistry):$(VERSION_TAG)

# - stage: DeployStaging
#   displayName: 'Deploy Staging'
#   dependsOn: Build
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/staging'))
#   variables:
#     DEPLOYMENT_APP_SERVICE_CONTAINER: 'essencifai-backend-staging'
#     AZURE_COMPILATION_ENV: 'staging'
#     BASE_URL: 'https://essencifai-backend-staging-adefg0c3cjf5eged.canadacentral-01.azurewebsites.net/'

#   jobs:
#   - deployment: DevelopmentStagingJob
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'staging'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureRmWebAppDeployment@4
#             inputs:
#               ConnectionType: 'AzureRM'
#               azureSubscription: $(azureServiceConnection)
#               appType: 'webAppContainer'
#               WebAppName: $(DEPLOYMENT_APP_SERVICE_CONTAINER)
#               containers: $(containerRegistryServerURL)/$(imageRegistry):$(VERSION_TAG)
#               DockerNamespace: $(containerRegistryServerURL)
#               # DockerRepository: $(imageRegistry):$(VERSION_TAG)

#   - job: RunPostDeploymentTests
#     displayName: 'Run Post-Deployment Tests'
#     dependsOn: DevelopmentStagingJob
#     pool:
#       vmImage: $(vmImageName)
#     continueOnError: true 
#     steps:
#     - checkout: self
      
#     # Add a delay to ensure the app is fully ready
#     - bash: |
#         echo "Waiting for application to be fully deployed..."
#         sleep 30
#       displayName: 'Wait for App to Stabilize'

#     # Setup Python environment
#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: $(pythonVersion)
#         addToPath: true
#       displayName: 'Setup Python $(pythonVersion)'

#     # Install pytest and required dependencies
#     - bash: |
#         python -m pip install --upgrade pip
#         pip install pytest pytest-asyncio httpx python-dotenv
#       displayName: 'Install Test Dependencies'

#     # Create test environment file
#     - bash: |
#         echo "BASE_URL=$(BASE_URL)" > $(Build.SourcesDirectory)/tests/.env.test
#         echo "VALID_USER_ID=51c18180-3f42-4984-84db-68b28a8772f6" >> $(Build.SourcesDirectory)/tests/.env.test
#         echo "INVALID_USER_ID=51c18180-3f42-4984-84db-68b28a1111g9" >> $(Build.SourcesDirectory)/tests/.env.test
#         echo "PROJECT_ID=1" >> $(Build.SourcesDirectory)/tests/.env.test
#         echo "VALID_TICKER=AAPL" >> $(Build.SourcesDirectory)/tests/.env.test
#         echo "INVALID_TICKER=INVALIDTICKER" >> $(Build.SourcesDirectory)/tests/.env.test
#         # Add any other environment variables needed for tests
#       displayName: 'Create Test Environment File'
      
#     # Run the tests using script.sh
#     - bash: |
#         chmod +x $(Build.SourcesDirectory)/tests/script.sh
#         cd $(Build.SourcesDirectory)/tests
#         ./script.sh
#       displayName: 'Run Tests using script.sh'
      
#     # Alternatively, run pytest directly if needed
#     - bash: |
#         cd $(Build.SourcesDirectory)/tests
#         python -m pytest routes -v --junitxml=test-results.xml
#       displayName: 'Run Tests with pytest'
#       condition: always()  # Run even if the script.sh execution fails
    
#     # Publish test results
#     - task: PublishTestResults@2
#       displayName: 'Publish Test Results'
#       inputs:
#         testResultsFormat: 'JUnit'
#         testResultsFiles: '**/test-results.xml'
#         mergeTestResults: true
#         testRunTitle: 'Post Deployment Tests'
#       condition: succeededOrFailed()
      
#     # Archive test results
#     - task: CopyFiles@2
#       displayName: 'Copy Test Results'
#       inputs:
#         SourceFolder: '$(Build.SourcesDirectory)/tests/results'
#         Contents: '**'
#         TargetFolder: '$(Build.ArtifactStagingDirectory)/test-results'
#       condition: succeededOrFailed()
      
#     - task: PublishBuildArtifacts@1
#       displayName: 'Publish Test Results Artifact'
#       inputs:
#         PathtoPublish: '$(Build.ArtifactStagingDirectory)/test-results'
#         ArtifactName: 'test-results'
#         publishLocation: 'Container'
#       condition: succeededOrFailed()



# - stage: DeployProduction
#   displayName: 'Deploy Production'
#   dependsOn: Build
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
#   variables:
#     DEPLOYMENT_APP_SERVICE_CONTAINER: 'essencifai-backend-prod'
#     AZURE_COMPILATION_ENV: 'production'

#   jobs:
#   - deployment: DevelopmentProductionJob
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'production'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureRmWebAppDeployment@4
#             inputs:
#               ConnectionType: 'AzureRM'
#               azureSubscription: $(azureServiceConnection)
#               appType: 'webAppContainer'
#               WebAppName: $(DEPLOYMENT_APP_SERVICE_CONTAINER)
#               containers: $(containerRegistry)/$(imageRegistry):$(VERSION_TAG)
#               # DockerNamespace: 'essencifaibackendregistry.azurecr.io'
#               DockerNamespace: $(containerRegistryServerURL)
#               DockerRepository: $(imageRegistry):$(VERSION_TAG)


